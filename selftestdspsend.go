package selftestdspsend

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/syddo/yass_dev/lib/commonlogic"
)

const filenameSelftestDspSendHeader string = "SelftestDspSendAutogen.h"
const filenameSelftestDspSend string = "SelftestDspSendAutogen.cpp"

type DspSendBlockConfig struct {
	Name            string `json:"name,omitempty"`
	DataPin         string `json:"DataPin,omitempty"`
	SendReference   string `json:"SendReference,omitempty"`
	WordSize        string `json:"WordSize,omitempty"`
	WordOrientation string `json:"WordOrientation,omitempty"`
}

type HexFilesLocConfig struct {
	Name    string `json:"name,omitempty"`
	DirPath string `json:"dir,omitempty"`
}

type DspSendBlockConfigs struct {
	DspSendBlockConfigs []DspSendBlockConfig `json:"DSPSendBlockConfig"`
}

type HexFilesLocConfigs struct {
	HexFilesLocConfigs []HexFilesLocConfig `json:"hexfilesloc"`
}

/// HEX File naming convention struct
type hexfilename struct {
	test   string
	flow   string
	device string
	rev    string
}

func newHexfilename(filename string) *hexfilename {

	rawFileName := strings.Split(filename, "_")

	var testName string
	for i := 0; i < len(rawFileName)-4; i++ {
		testName += rawFileName[i]
	}

	return &hexfilename{
		test:   testName,
		flow:   rawFileName[len(rawFileName)-4],
		device: rawFileName[len(rawFileName)-3],
		rev:    rawFileName[len(rawFileName)-2],
	}
}

// ReadDspSendBlockConfig / Parse the yassconfig.json file. It should reside together with the
// executable.
// future feature is to allow multiple DSPSendBlock configs. this will have to be postponed,
// right now, default will be used.
func ReadDspSendBlockConfig(configName string) DspSendBlockConfig {
	// in current directory, find the json config file
	configFilePath := filepath.Join(commonlogic.GetCurrentPath(false), "Support/yassconfig.json")
	jsonFile, err := os.Open(configFilePath)
	commonlogic.CheckError(err)
	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)
	var dspsendblockconfigs DspSendBlockConfigs

	json.Unmarshal(byteValue, &dspsendblockconfigs)

	return dspsendblockconfigs.DspSendBlockConfigs[0]

}

func ReadHexFilesLocation(configName string) HexFilesLocConfig {
	// in current directory, find the json config file
	configFilePath := filepath.Join(commonlogic.GetCurrentPath(false), "Support/yassconfig.json")
	jsonFile, err := os.Open(configFilePath)
	commonlogic.CheckError(err)
	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)
	var hexfileslocationconfigs HexFilesLocConfigs

	json.Unmarshal(byteValue, &hexfileslocationconfigs)

	return hexfileslocationconfigs.HexFilesLocConfigs[0] // for first release return only the first location in config.json

}

func writeCppFileEntry() []string {

	var entryLines []string
	dt := time.Now()
	timeVersionLine := fmt.Sprintf("%s Generated by YASS (Yet Another Support Script) v0.0.1-alpha1", dt.Format(time.UnixDate))

	entryLines = append(entryLines, "/*")
	entryLines = append(entryLines, " *   @brief   SelftestDspSendAutogen file")
	entryLines = append(entryLines, " *   ")
	entryLines = append(entryLines, " *   This is an autogenerated file and must not be modified directly.")
	entryLines = append(entryLines, " *   File Generation Details:")
	entryLines = append(entryLines, fmt.Sprintf(" *   %s", timeVersionLine))
	entryLines = append(entryLines, " */")
	entryLines = append(entryLines, "")
	entryLines = append(entryLines, "#include \"./selftestLib/UTLDspSendBlock.h\"")
	entryLines = append(entryLines, "#include \"SelftestDspSendAutogen.h\"")
	entryLines = append(entryLines, "")
	entryLines = append(entryLines, "")
	entryLines = append(entryLines, "")

	return entryLines
}

func getHexFileNameAsObjectNames(hexfilesList []string) []string {
	var hexfileObjectNames []string

	for _, file := range hexfilesList {
		rawFileName := strings.Split(file, "_")
		var concatFileName string
		/*for _, c := range rawFileName {
			concatFileName += c
		}*/
		for i := 0; i < len(rawFileName); i++ {
			concatFileName += rawFileName[i]
		}
		hexfileObjectNames = append(hexfileObjectNames, concatFileName[:len(concatFileName)-4])
	}
	return hexfileObjectNames
}

func writeCppFile(inputFilesPath string, configName string, filename string) {

	// read config file (from json) to config struct, issue an error and exit if not successful
	defaultBlockConfig := ReadDspSendBlockConfig("yassconfig.json")
	//defaultHexFileFolder := ReadHexFilesLocation("yassconfig.json")
	hexFiles := commonlogic.FindFiles(inputFilesPath, ".hex")
	fhCppFile, err := os.Create(filepath.Join(inputFilesPath, filename))
	commonlogic.CheckError(err)
	defer func(fhCppFile *os.File) {
		err := fhCppFile.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(fhCppFile)
	bwCppFile := bufio.NewWriter(fhCppFile)

	for _, line := range writeCppFileEntry() {
		fmt.Fprintln(bwCppFile, line)
	}

	for _, hexObjName := range getHexFileNameAsObjectNames(hexFiles) {
		fmt.Fprintln(bwCppFile, fmt.Sprintf("UTLDspSendBlock %s;", hexObjName))
	}

	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, "")

	fmt.Fprintln(bwCppFile, "TMResultM loadSelftestDspSend()")
	fmt.Fprintln(bwCppFile, "{")
	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, fmt.Sprintf("  PinML DataPin(\"%s\");", defaultBlockConfig.DataPin))
	fmt.Fprintln(bwCppFile, "  SelftestDspSendDefaults.Datapin = DataPin;")
	fmt.Fprintln(bwCppFile, fmt.Sprintf("  SelftestDspSendDefaults.SendRefName = \"%s\";", defaultBlockConfig.SendReference))
	fmt.Fprintln(bwCppFile, fmt.Sprintf("  SelftestDspSendDefaults.WordSize = %s;", defaultBlockConfig.WordSize))
	fmt.Fprintln(bwCppFile, fmt.Sprintf("  SelftestDspSendDefaults.WordOrientation = %s;", defaultBlockConfig.WordOrientation))
	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, "  StringS TestProgPath = SYS.GetProgramPath();")
	fmt.Fprintln(bwCppFile, "")
	for _, file := range hexFiles {
		rawFileName := strings.Split(file, "_")
		var concatFilename string
		for i := 0; i < len(rawFileName); i++ {
			concatFilename += rawFileName[i]
		}
		fmt.Fprintln(bwCppFile, fmt.Sprintf("  %s.configure(\"%s\", &SelftestDspSendDefaults, UTLDspSendBlock::DSP_SEND_TYPE_MEMORY_AUTO_INC);",
			concatFilename[:len(concatFilename)-4], file[:len(file)-4]))
		fmt.Fprintln(bwCppFile, fmt.Sprintf("  %s = TestProgPath + \"%s/%s\";", concatFilename[:len(concatFilename)-4], inputFilesPath, file))
		fmt.Fprintln(bwCppFile, "")
	}
	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, "  return(TM_PASS);")
	fmt.Fprintln(bwCppFile, "")
	fmt.Fprintln(bwCppFile, "}")

	bwCppFile.Flush()
}

// GenerateSHFAutogen / exported function to be called by the main package to generate the selftest hex files autogen
func GenerateSHFAutogen(inputFilesLocation string, configName string) {
	fmt.Println("generate the selftest hex files to DSP Send")
	if len(inputFilesLocation) == 0 {
		println("Please try again...")
		println("add param -i <input directory> which is the folder name of HEX Files for parsing")
		os.Exit(1)
	}
	// basic checks for proper operation
	if commonlogic.InCorrectDirectory() {
		commonlogic.ChangeToRootDirectory()

		writeCppFile(inputFilesLocation, configName, filenameSelftestDspSend)
	}
}
