package selftestdatahandling

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/syddo/yass_dev/lib/commonlogic"
)

const filenameDataHandlingHeader string = "SelftestDataHandlingAutogen.h"
const filenameDataHandlingCpp string = "SelftestDataHandlingAutogen.cpp"

type autogenfilename struct {
	test   string
	flow   string
	device string
	rev    string
}

func newAutogenfilename(filename string) *autogenfilename {
	s := strings.Split(filename, "_")

	var test string
	for i := 0; i < len(s)-4; i++ {
		test += strings.Title(s[i])
	}

	return &autogenfilename{test: test, flow: s[len(s)-4], device: s[len(s)-3], rev: s[len(s)-2]}
}

func writeHeaderFileEntry() []string {
	var headerlines []string
	dt := time.Now()
	fmt.Println(dt.Format(time.UnixDate))
	timeVersionLine := fmt.Sprintf("%s Generated by YASS (Yet Another Support Script) v0.0.1-alpha1", dt.Format(time.UnixDate))

	headerlines = append(headerlines, "/*")
	headerlines = append(headerlines, " *   @brief   SelftestDataHandlingAutogen header file")
	headerlines = append(headerlines, " *   ")
	headerlines = append(headerlines, " *   This is an autogenerated file and must not be modified directly.")
	headerlines = append(headerlines, " *   ")
	headerlines = append(headerlines, " *   File Generation Details:")
	headerlines = append(headerlines, fmt.Sprintf(" *   %s", timeVersionLine))
	headerlines = append(headerlines, " */")
	headerlines = append(headerlines, "")
	headerlines = append(headerlines, "#pragma once")
	headerlines = append(headerlines, "")

	return headerlines
}

func writeCppFileEntry() []string {

	var entryLines []string
	dt := time.Now()
	timeVersionLine := fmt.Sprintf("%s Generated by YASS (Yet Another Support Script) v0.0.1-alpha1", dt.Format(time.UnixDate))

	entryLines = append(entryLines, "/*")
	entryLines = append(entryLines, " *   @brief   SelftestDataHandlingAutogen file")
	entryLines = append(entryLines, " *   ")
	entryLines = append(entryLines, " *   This is an autogenerated file and must not be modified directly.")
	entryLines = append(entryLines, " *   File Generation Details:")
	entryLines = append(entryLines, fmt.Sprintf(" *   %s", timeVersionLine))
	entryLines = append(entryLines, " */")
	entryLines = append(entryLines, "")
	entryLines = append(entryLines, "#include \"project.h\"")
	entryLines = append(entryLines, "")

	return entryLines
}

func createGSelftestDataFromList(list *[]string) []string {
	var listGSelftestData []string

	for _, file := range *list {
		filename := newAutogenfilename(file)
		listGSelftestData = append(listGSelftestData, fmt.Sprintf("gSelftestData%s", filename.test))
	}
	return commonlogic.RemoveDuplicateValues(listGSelftestData)
}

func createStDataFromList(list *[]string) []string {
	var listSelftestData []string

	for _, file := range *list {
		filename := newAutogenfilename(file)
		listSelftestData = append(listSelftestData, fmt.Sprintf("i%sProd%s%sRev%s(gSelftestData%s);",
			filename.test, filename.flow, filename.device, filename.rev, filename.test))
		listSelftestData = append(listSelftestData, fmt.Sprintf("i%sDeeplog%s%sRev%s(gSelftestData%s);",
			filename.test, filename.flow, filename.device, filename.rev, filename.test))
	}
	return commonlogic.RemoveDuplicateValues(listSelftestData)
}

func writeHeaderFile(inputFilesPath string, fileName string) {

	headerFiles := commonlogic.FindFiles(inputFilesPath, ".h")
	fhHeaderFiles, err := os.Create(filepath.Join(inputFilesPath, fileName))
	commonlogic.CheckError(err)
	defer func(fhHeaderFiles *os.File) {
		err := fhHeaderFiles.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(fhHeaderFiles)

	bwHeaderFiles := bufio.NewWriter(fhHeaderFiles)
	for _, line := range writeHeaderFileEntry() {
		fmt.Fprintln(bwHeaderFiles, line)
	}
	// write the include with filenames
	for _, filename := range headerFiles {
		includeLine := fmt.Sprintf("#include \"%s\"", filename)
		fmt.Fprintln(bwHeaderFiles, includeLine)
	}
	// write next section
	fmt.Fprintln(bwHeaderFiles, "")
	fmt.Fprintln(bwHeaderFiles, "")
	fmt.Fprintln(bwHeaderFiles, "")
	fmt.Fprintln(bwHeaderFiles, "extern void gvAutoGenSelftestDataObjects();")

	hfilesOnlySpec := commonlogic.FilterFilesInList(&headerFiles, "_spec")
	gSelftestDataNames := createGSelftestDataFromList(&hfilesOnlySpec)
	for _, line := range gSelftestDataNames {
		fmt.Fprintln(bwHeaderFiles, fmt.Sprintf("extern SelftestDataHandling* %s;", line))
	}
	fmt.Fprintln(bwHeaderFiles, "")
	fmt.Fprintln(bwHeaderFiles, "extern void gvAutoGenClearSelftestDataObjects();")

	bwHeaderFiles.Flush()
}

func writeCppFiles(inputFilePath string, filename string) {

	cppFiles := commonlogic.FindFiles(inputFilePath, ".cpp")
	fhCppFiles, err := os.Create(filepath.Join(inputFilePath, filename))
	commonlogic.CheckError(err)
	defer func(fhCppFiles *os.File) {
		err := fhCppFiles.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(fhCppFiles)

	bwCppFiles := bufio.NewWriter(fhCppFiles)

	for _, line := range writeCppFileEntry() {
		fmt.Fprintln(bwCppFiles, line)
	}

	cppFilesOnlySpec := commonlogic.FilterFilesInList(&cppFiles, "_spec")
	for _, line := range createGSelftestDataFromList(&cppFilesOnlySpec) {
		fmt.Fprintln(bwCppFiles, fmt.Sprintf("SelftestDataHandling* %s;", line))
	}
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "void gvAutoGenSelftestDataObjects()")
	fmt.Fprintln(bwCppFiles, "{")
	for _, line := range createGSelftestDataFromList(&cppFilesOnlySpec) {
		fmt.Fprintln(bwCppFiles, fmt.Sprintf("  %s = new SelftestDataHandling();", line))
	}
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")
	for i, line := range createStDataFromList(&cppFilesOnlySpec) {
		fmt.Fprintln(bwCppFiles, fmt.Sprintf("  %s", line))
		if i%2 != 0 {
			fmt.Fprintln(bwCppFiles, "")
		}
	}
	fmt.Fprintln(bwCppFiles, "}")

	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")
	fmt.Fprintln(bwCppFiles, "")

	fmt.Fprintln(bwCppFiles, "void gvAutoGenClearSelftestDataObjects()")
	fmt.Fprintln(bwCppFiles, "{")
	for _, line := range createGSelftestDataFromList(&cppFilesOnlySpec) {
		fmt.Fprintln(bwCppFiles, fmt.Sprintf("  delete %s;", line))
	}
	fmt.Fprintln(bwCppFiles, "}")

	bwCppFiles.Flush()
}

func GenerateSDHFiles(inputFilesLocation string) {
	fmt.Println("Selftest Data Handling Generation.")
	// if input directory is not specified, user attempts to run from standard location.
	// check if input directory is empty and do yaas location checks
	if len(inputFilesLocation) == 0 {
		fmt.Printf("\nAm I running from Support Directory? --> %t\n", commonlogic.InCorrectDirectory())
		if commonlogic.InCorrectDirectory() {
			commonlogic.ChangeToRootDirectory()
			commonlogic.GetCurrentPath(true)
			writeHeaderFile(filepath.Join(commonlogic.GetCurrentPath(false), "/Libraries/AppsLib/selftestLib/autogen_testprog_files"), filenameDataHandlingHeader)
			writeCppFiles(filepath.Join(commonlogic.GetCurrentPath(false), "/Libraries/AppsLib/selftestLib/autogen_testprog_files"), filenameDataHandlingCpp)

		} else {
			fmt.Println("This is an error I cannot find my bearings.")
		}
	} else {
		fmt.Println("Manually Specified the input directory")
		fmt.Printf("Directory: %t\n", inputFilesLocation)
	}
}
